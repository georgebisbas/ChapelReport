@article{Chamberlain2013,
abstract = {Chapel is an emerging parallel language whose design and development has been led by Cray Inc. under theDARPA High Productivity Computing Systems program (HPCS) from 2003 to the present. Chapel supports a multithreaded execution model, permitting the expression of far more general and dynamic styles of computation than the typi- cal single-threaded Single Program, Multiple Data (SPMD) programming models that became dominant during the 1990's. Chapel was designed such that higher-level abstractions, such as those supporting data parallelism, would be built in terms of lower-level concepts in the language, permitting the user to select amongst differing levels of abstraction and control as required by their algorithm or performance requirements. This chapter provides a brief introduction to Chapel, starting with a condensed history of the project (Section 9.1). It then describes Chapel's mo- tivating themes (Section 9.2), followed by a survey of its main features (Section 9.3), and a summary of the project's status and future work (Chapter 9.4).},
author = {Chamberlain, Bradford L.},
file = {:C$\backslash$:/Users/bk/Downloads/BriefOverviewChapel.pdf:pdf},
journal = {Cray},
keywords = {an upcoming book chapter,bradford l,c hapel 1,chamberlain,cray inc,pre - print of,rief o verview of},
number = {January},
pages = {0--20},
title = {{A Brief Overview of Chapel}},
volume = {1},
year = {2013}
}
@article{Chamberlain2015,
author = {Chamberlain, Bradford L.},
file = {:C$\backslash$:/Users/bk/Downloads/PMfPC-Chapel.pdf:pdf},
isbn = {9780262528818},
journal = {Programming models for parallel computing},
pages = {129--159},
title = {{Chapel}},
volume = {2015},
year = {2015}
}
@article{Dun2012,
abstract = {Abstractâ€”In this paper we evaluate the performance of the Chapel programming language from the perspective of its lan- guage primitives and features, where the microbenchmarks are synthesized from our lessons learned in developing molecular dynamics simulation programs in Chapel. Experimental results show that most language building blocks have comparable performance to corresponding hand-written C code, while the complex applications can achieve up to 70{\%} of the performance of C implementation. We identify several causes of overhead that can be further optimized by Chapel compiler. This work not only helps Chapel users understand the performance implication of using Chapel, but also provides useful feedbacks for Chapel developers to make a better compiler},
author = {Dun, Nan and Taura, Kenjiro},
doi = {10.1109/IPDPSW.2012.64},
file = {:C$\backslash$:/Users/bk/Downloads/dun2012.pdf:pdf},
isbn = {9780769546766},
journal = {Proceedings of the 2012 IEEE 26th International Parallel and Distributed Processing Symposium Workshops, IPDPSW 2012},
keywords = {parallel languages,performance evaluation},
pages = {497--506},
title = {{An empirical performance study of chapel programming language}},
year = {2012}
}
